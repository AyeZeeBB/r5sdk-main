// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servercontroller.proto

#include "servercontroller.pb.h"

#include <algorithm>

#include <thirdparty/protobuf/io/coded_stream.h>
#include <thirdparty/protobuf/extension_set.h>
#include <thirdparty/protobuf/wire_format_lite.h>
#include <thirdparty/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <thirdparty/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace servercontroller {
PROTOBUF_CONSTEXPR ServerUpdate::ServerUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerUpdateDefaultTypeInternal() {}
  union {
    ServerUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerUpdateDefaultTypeInternal _ServerUpdate_default_instance_;
PROTOBUF_CONSTEXPR PlayerModerationMessage::PlayerModerationMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.identifier_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerModerationMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerModerationMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerModerationMessageDefaultTypeInternal() {}
  union {
    PlayerModerationMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerModerationMessageDefaultTypeInternal _PlayerModerationMessage_default_instance_;
PROTOBUF_CONSTEXPR ServerControlMessage::ServerControlMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerControlMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerControlMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerControlMessageDefaultTypeInternal() {}
  union {
    ServerControlMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerControlMessageDefaultTypeInternal _ServerControlMessage_default_instance_;
}  // namespace servercontroller
namespace servercontroller {
bool ServerUpdate_MESSAGE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ServerUpdate_MESSAGE_TYPE_strings[3] = {};

static const char ServerUpdate_MESSAGE_TYPE_names[] =
  "FATAL_SCRIPT_ERROR"
  "HOST_STATE_CHANGE"
  "MESSAGE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ServerUpdate_MESSAGE_TYPE_entries[] = {
  { {ServerUpdate_MESSAGE_TYPE_names + 0, 18}, 2 },
  { {ServerUpdate_MESSAGE_TYPE_names + 18, 17}, 1 },
  { {ServerUpdate_MESSAGE_TYPE_names + 35, 19}, 0 },
};

static const int ServerUpdate_MESSAGE_TYPE_entries_by_number[] = {
  2, // 0 -> MESSAGE_UNSPECIFIED
  1, // 1 -> HOST_STATE_CHANGE
  0, // 2 -> FATAL_SCRIPT_ERROR
};

const std::string& ServerUpdate_MESSAGE_TYPE_Name(
    ServerUpdate_MESSAGE_TYPE value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ServerUpdate_MESSAGE_TYPE_entries,
          ServerUpdate_MESSAGE_TYPE_entries_by_number,
          3, ServerUpdate_MESSAGE_TYPE_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ServerUpdate_MESSAGE_TYPE_entries,
      ServerUpdate_MESSAGE_TYPE_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ServerUpdate_MESSAGE_TYPE_strings[idx].get();
}
bool ServerUpdate_MESSAGE_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerUpdate_MESSAGE_TYPE* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ServerUpdate_MESSAGE_TYPE_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ServerUpdate_MESSAGE_TYPE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ServerUpdate_MESSAGE_TYPE ServerUpdate::MESSAGE_UNSPECIFIED;
constexpr ServerUpdate_MESSAGE_TYPE ServerUpdate::HOST_STATE_CHANGE;
constexpr ServerUpdate_MESSAGE_TYPE ServerUpdate::FATAL_SCRIPT_ERROR;
constexpr ServerUpdate_MESSAGE_TYPE ServerUpdate::MESSAGE_TYPE_MIN;
constexpr ServerUpdate_MESSAGE_TYPE ServerUpdate::MESSAGE_TYPE_MAX;
constexpr int ServerUpdate::MESSAGE_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool PlayerModerationMessage_ACTION_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PlayerModerationMessage_ACTION_TYPE_strings[4] = {};

static const char PlayerModerationMessage_ACTION_TYPE_names[] =
  "ACTION_UNSPECIFIED"
  "BAN"
  "KICK"
  "UNBAN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PlayerModerationMessage_ACTION_TYPE_entries[] = {
  { {PlayerModerationMessage_ACTION_TYPE_names + 0, 18}, 0 },
  { {PlayerModerationMessage_ACTION_TYPE_names + 18, 3}, 2 },
  { {PlayerModerationMessage_ACTION_TYPE_names + 21, 4}, 1 },
  { {PlayerModerationMessage_ACTION_TYPE_names + 25, 5}, 3 },
};

static const int PlayerModerationMessage_ACTION_TYPE_entries_by_number[] = {
  0, // 0 -> ACTION_UNSPECIFIED
  2, // 1 -> KICK
  1, // 2 -> BAN
  3, // 3 -> UNBAN
};

const std::string& PlayerModerationMessage_ACTION_TYPE_Name(
    PlayerModerationMessage_ACTION_TYPE value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PlayerModerationMessage_ACTION_TYPE_entries,
          PlayerModerationMessage_ACTION_TYPE_entries_by_number,
          4, PlayerModerationMessage_ACTION_TYPE_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PlayerModerationMessage_ACTION_TYPE_entries,
      PlayerModerationMessage_ACTION_TYPE_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PlayerModerationMessage_ACTION_TYPE_strings[idx].get();
}
bool PlayerModerationMessage_ACTION_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerModerationMessage_ACTION_TYPE* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PlayerModerationMessage_ACTION_TYPE_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<PlayerModerationMessage_ACTION_TYPE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PlayerModerationMessage_ACTION_TYPE PlayerModerationMessage::ACTION_UNSPECIFIED;
constexpr PlayerModerationMessage_ACTION_TYPE PlayerModerationMessage::KICK;
constexpr PlayerModerationMessage_ACTION_TYPE PlayerModerationMessage::BAN;
constexpr PlayerModerationMessage_ACTION_TYPE PlayerModerationMessage::UNBAN;
constexpr PlayerModerationMessage_ACTION_TYPE PlayerModerationMessage::ACTION_TYPE_MIN;
constexpr PlayerModerationMessage_ACTION_TYPE PlayerModerationMessage::ACTION_TYPE_MAX;
constexpr int PlayerModerationMessage::ACTION_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool PlayerModerationMessage_IDENTIFIER_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PlayerModerationMessage_IDENTIFIER_TYPE_strings[3] = {};

static const char PlayerModerationMessage_IDENTIFIER_TYPE_names[] =
  "IDENTIFIER_UNSPECIFIED"
  "IP"
  "UID";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PlayerModerationMessage_IDENTIFIER_TYPE_entries[] = {
  { {PlayerModerationMessage_IDENTIFIER_TYPE_names + 0, 22}, 0 },
  { {PlayerModerationMessage_IDENTIFIER_TYPE_names + 22, 2}, 2 },
  { {PlayerModerationMessage_IDENTIFIER_TYPE_names + 24, 3}, 1 },
};

static const int PlayerModerationMessage_IDENTIFIER_TYPE_entries_by_number[] = {
  0, // 0 -> IDENTIFIER_UNSPECIFIED
  2, // 1 -> UID
  1, // 2 -> IP
};

const std::string& PlayerModerationMessage_IDENTIFIER_TYPE_Name(
    PlayerModerationMessage_IDENTIFIER_TYPE value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PlayerModerationMessage_IDENTIFIER_TYPE_entries,
          PlayerModerationMessage_IDENTIFIER_TYPE_entries_by_number,
          3, PlayerModerationMessage_IDENTIFIER_TYPE_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PlayerModerationMessage_IDENTIFIER_TYPE_entries,
      PlayerModerationMessage_IDENTIFIER_TYPE_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PlayerModerationMessage_IDENTIFIER_TYPE_strings[idx].get();
}
bool PlayerModerationMessage_IDENTIFIER_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerModerationMessage_IDENTIFIER_TYPE* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PlayerModerationMessage_IDENTIFIER_TYPE_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PlayerModerationMessage_IDENTIFIER_TYPE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PlayerModerationMessage_IDENTIFIER_TYPE PlayerModerationMessage::IDENTIFIER_UNSPECIFIED;
constexpr PlayerModerationMessage_IDENTIFIER_TYPE PlayerModerationMessage::UID;
constexpr PlayerModerationMessage_IDENTIFIER_TYPE PlayerModerationMessage::IP;
constexpr PlayerModerationMessage_IDENTIFIER_TYPE PlayerModerationMessage::IDENTIFIER_TYPE_MIN;
constexpr PlayerModerationMessage_IDENTIFIER_TYPE PlayerModerationMessage::IDENTIFIER_TYPE_MAX;
constexpr int PlayerModerationMessage::IDENTIFIER_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ServerControlMessage_MESSAGE_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ServerControlMessage_MESSAGE_TYPE_strings[5] = {};

static const char ServerControlMessage_MESSAGE_TYPE_names[] =
  "BAN"
  "CHANGE_LEVEL"
  "KICK"
  "MESSAGE_UNSPECIFIED"
  "RELOAD";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ServerControlMessage_MESSAGE_TYPE_entries[] = {
  { {ServerControlMessage_MESSAGE_TYPE_names + 0, 3}, 4 },
  { {ServerControlMessage_MESSAGE_TYPE_names + 3, 12}, 2 },
  { {ServerControlMessage_MESSAGE_TYPE_names + 15, 4}, 3 },
  { {ServerControlMessage_MESSAGE_TYPE_names + 19, 19}, 0 },
  { {ServerControlMessage_MESSAGE_TYPE_names + 38, 6}, 1 },
};

static const int ServerControlMessage_MESSAGE_TYPE_entries_by_number[] = {
  3, // 0 -> MESSAGE_UNSPECIFIED
  4, // 1 -> RELOAD
  1, // 2 -> CHANGE_LEVEL
  2, // 3 -> KICK
  0, // 4 -> BAN
};

const std::string& ServerControlMessage_MESSAGE_TYPE_Name(
    ServerControlMessage_MESSAGE_TYPE value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ServerControlMessage_MESSAGE_TYPE_entries,
          ServerControlMessage_MESSAGE_TYPE_entries_by_number,
          5, ServerControlMessage_MESSAGE_TYPE_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ServerControlMessage_MESSAGE_TYPE_entries,
      ServerControlMessage_MESSAGE_TYPE_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ServerControlMessage_MESSAGE_TYPE_strings[idx].get();
}
bool ServerControlMessage_MESSAGE_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerControlMessage_MESSAGE_TYPE* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ServerControlMessage_MESSAGE_TYPE_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ServerControlMessage_MESSAGE_TYPE>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ServerControlMessage_MESSAGE_TYPE ServerControlMessage::MESSAGE_UNSPECIFIED;
constexpr ServerControlMessage_MESSAGE_TYPE ServerControlMessage::RELOAD;
constexpr ServerControlMessage_MESSAGE_TYPE ServerControlMessage::CHANGE_LEVEL;
constexpr ServerControlMessage_MESSAGE_TYPE ServerControlMessage::KICK;
constexpr ServerControlMessage_MESSAGE_TYPE ServerControlMessage::BAN;
constexpr ServerControlMessage_MESSAGE_TYPE ServerControlMessage::MESSAGE_TYPE_MIN;
constexpr ServerControlMessage_MESSAGE_TYPE ServerControlMessage::MESSAGE_TYPE_MAX;
constexpr int ServerControlMessage::MESSAGE_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ServerUpdate::_Internal {
 public:
};

ServerUpdate::ServerUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servercontroller.ServerUpdate)
}
ServerUpdate::ServerUpdate(const ServerUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ServerUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:servercontroller.ServerUpdate)
}

inline void ServerUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerUpdate::~ServerUpdate() {
  // @@protoc_insertion_point(destructor:servercontroller.ServerUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:servercontroller.ServerUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* ServerUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .servercontroller.ServerUpdate.MESSAGE_TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::servercontroller::ServerUpdate_MESSAGE_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servercontroller.ServerUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .servercontroller.ServerUpdate.MESSAGE_TYPE type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servercontroller.ServerUpdate)
  return target;
}

size_t ServerUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servercontroller.ServerUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .servercontroller.ServerUpdate.MESSAGE_TYPE type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerUpdate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ServerUpdate*>(
      &from));
}

void ServerUpdate::MergeFrom(const ServerUpdate& from) {
  ServerUpdate* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:servercontroller.ServerUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ServerUpdate::CopyFrom(const ServerUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servercontroller.ServerUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerUpdate::IsInitialized() const {
  return true;
}

void ServerUpdate::InternalSwap(ServerUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
}

std::string ServerUpdate::GetTypeName() const {
  return "servercontroller.ServerUpdate";
}


// ===================================================================

class PlayerModerationMessage::_Internal {
 public:
};

PlayerModerationMessage::PlayerModerationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servercontroller.PlayerModerationMessage)
}
PlayerModerationMessage::PlayerModerationMessage(const PlayerModerationMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PlayerModerationMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.identifier_){}
    , decltype(_impl_.identifier_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_identifier().empty()) {
    _this->_impl_.identifier_.Set(from._internal_identifier(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.identifier_type_ = from._impl_.identifier_type_;
  // @@protoc_insertion_point(copy_constructor:servercontroller.PlayerModerationMessage)
}

inline void PlayerModerationMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.identifier_){}
    , decltype(_impl_.identifier_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerModerationMessage::~PlayerModerationMessage() {
  // @@protoc_insertion_point(destructor:servercontroller.PlayerModerationMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerModerationMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.identifier_.Destroy();
}

void PlayerModerationMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerModerationMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:servercontroller.PlayerModerationMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.identifier_.ClearToEmpty();
  _impl_.identifier_type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* PlayerModerationMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .servercontroller.PlayerModerationMessage.IDENTIFIER_TYPE identifier_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_identifier_type(static_cast<::servercontroller::PlayerModerationMessage_IDENTIFIER_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      // string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerModerationMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servercontroller.PlayerModerationMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .servercontroller.PlayerModerationMessage.IDENTIFIER_TYPE identifier_type = 1;
  if (this->_internal_identifier_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_identifier_type(), target);
  }

  // string identifier = 2;
  if (!this->_internal_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servercontroller.PlayerModerationMessage.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servercontroller.PlayerModerationMessage)
  return target;
}

size_t PlayerModerationMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servercontroller.PlayerModerationMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 2;
  if (!this->_internal_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // .servercontroller.PlayerModerationMessage.IDENTIFIER_TYPE identifier_type = 1;
  if (this->_internal_identifier_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_identifier_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerModerationMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PlayerModerationMessage*>(
      &from));
}

void PlayerModerationMessage::MergeFrom(const PlayerModerationMessage& from) {
  PlayerModerationMessage* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:servercontroller.PlayerModerationMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_identifier().empty()) {
    _this->_internal_set_identifier(from._internal_identifier());
  }
  if (from._internal_identifier_type() != 0) {
    _this->_internal_set_identifier_type(from._internal_identifier_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PlayerModerationMessage::CopyFrom(const PlayerModerationMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servercontroller.PlayerModerationMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerModerationMessage::IsInitialized() const {
  return true;
}

void PlayerModerationMessage::InternalSwap(PlayerModerationMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.identifier_, lhs_arena,
      &other->_impl_.identifier_, rhs_arena
  );
  swap(_impl_.identifier_type_, other->_impl_.identifier_type_);
}

std::string PlayerModerationMessage::GetTypeName() const {
  return "servercontroller.PlayerModerationMessage";
}


// ===================================================================

class ServerControlMessage::_Internal {
 public:
};

ServerControlMessage::ServerControlMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servercontroller.ServerControlMessage)
}
ServerControlMessage::ServerControlMessage(const ServerControlMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ServerControlMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:servercontroller.ServerControlMessage)
}

inline void ServerControlMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerControlMessage::~ServerControlMessage() {
  // @@protoc_insertion_point(destructor:servercontroller.ServerControlMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerControlMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerControlMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerControlMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:servercontroller.ServerControlMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* ServerControlMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .servercontroller.ServerControlMessage.MESSAGE_TYPE type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::servercontroller::ServerControlMessage_MESSAGE_TYPE>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerControlMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servercontroller.ServerControlMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .servercontroller.ServerControlMessage.MESSAGE_TYPE type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servercontroller.ServerControlMessage)
  return target;
}

size_t ServerControlMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servercontroller.ServerControlMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .servercontroller.ServerControlMessage.MESSAGE_TYPE type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerControlMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ServerControlMessage*>(
      &from));
}

void ServerControlMessage::MergeFrom(const ServerControlMessage& from) {
  ServerControlMessage* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:servercontroller.ServerControlMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ServerControlMessage::CopyFrom(const ServerControlMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servercontroller.ServerControlMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerControlMessage::IsInitialized() const {
  return true;
}

void ServerControlMessage::InternalSwap(ServerControlMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
}

std::string ServerControlMessage::GetTypeName() const {
  return "servercontroller.ServerControlMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace servercontroller
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::servercontroller::ServerUpdate*
Arena::CreateMaybeMessage< ::servercontroller::ServerUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servercontroller::ServerUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::servercontroller::PlayerModerationMessage*
Arena::CreateMaybeMessage< ::servercontroller::PlayerModerationMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servercontroller::PlayerModerationMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::servercontroller::ServerControlMessage*
Arena::CreateMaybeMessage< ::servercontroller::ServerControlMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servercontroller::ServerControlMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <thirdparty/protobuf/port_undef.inc>
