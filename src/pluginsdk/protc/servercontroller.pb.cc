// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servercontroller.proto

#include "servercontroller.pb.h"

#include <algorithm>

#include <thirdparty/protobuf/io/coded_stream.h>
#include <thirdparty/protobuf/extension_set.h>
#include <thirdparty/protobuf/wire_format_lite.h>
#include <thirdparty/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <thirdparty/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace servercontroller {
PROTOBUF_CONSTEXPR request::request(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.args_)*/{}
  , /*decltype(_impl_.request_num_)*/0u
  , /*decltype(_impl_.request_type_)*/0
  , /*decltype(_impl_.request_sub_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR requestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~requestDefaultTypeInternal() {}
  union {
    request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 requestDefaultTypeInternal _request_default_instance_;
PROTOBUF_CONSTEXPR response::response(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.is_unsolicited_response_)*/false
  , /*decltype(_impl_.response_num_)*/0u
  , /*decltype(_impl_.response_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct responseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR responseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~responseDefaultTypeInternal() {}
  union {
    response _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 responseDefaultTypeInternal _response_default_instance_;
}  // namespace servercontroller
namespace servercontroller {
bool request_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> request_t_strings[5] = {};

static const char request_t_names[] =
  "CONTROLLER_REQUEST_GAME_START"
  "CONTROLLER_REQUEST_MODERATION"
  "CONTROLLER_REQUEST_RELOAD"
  "CONTROLLER_REQUEST_UNSPECIFIED"
  "CONTROLLER_REQUSET_CHANGE_LEVEL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry request_t_entries[] = {
  { {request_t_names + 0, 29}, 1 },
  { {request_t_names + 29, 29}, 2 },
  { {request_t_names + 58, 25}, 3 },
  { {request_t_names + 83, 30}, 0 },
  { {request_t_names + 113, 31}, 4 },
};

static const int request_t_entries_by_number[] = {
  3, // 0 -> CONTROLLER_REQUEST_UNSPECIFIED
  0, // 1 -> CONTROLLER_REQUEST_GAME_START
  1, // 2 -> CONTROLLER_REQUEST_MODERATION
  2, // 3 -> CONTROLLER_REQUEST_RELOAD
  4, // 4 -> CONTROLLER_REQUSET_CHANGE_LEVEL
};

const std::string& request_t_Name(
    request_t value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          request_t_entries,
          request_t_entries_by_number,
          5, request_t_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      request_t_entries,
      request_t_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     request_t_strings[idx].get();
}
bool request_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, request_t* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      request_t_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<request_t>(int_value);
  }
  return success;
}
bool sub_request_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> sub_request_t_strings[3] = {};

static const char sub_request_t_names[] =
  "CONTROLLER_MODERATION_REQUEST_BAN"
  "CONTROLLER_MODERATION_REQUEST_KICK"
  "CONTROLLER_SUB_REQUEST_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry sub_request_t_entries[] = {
  { {sub_request_t_names + 0, 33}, 1 },
  { {sub_request_t_names + 33, 34}, 2 },
  { {sub_request_t_names + 67, 34}, 0 },
};

static const int sub_request_t_entries_by_number[] = {
  2, // 0 -> CONTROLLER_SUB_REQUEST_UNSPECIFIED
  0, // 1 -> CONTROLLER_MODERATION_REQUEST_BAN
  1, // 2 -> CONTROLLER_MODERATION_REQUEST_KICK
};

const std::string& sub_request_t_Name(
    sub_request_t value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          sub_request_t_entries,
          sub_request_t_entries_by_number,
          3, sub_request_t_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      sub_request_t_entries,
      sub_request_t_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     sub_request_t_strings[idx].get();
}
bool sub_request_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, sub_request_t* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      sub_request_t_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<sub_request_t>(int_value);
  }
  return success;
}
bool response_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> response_t_strings[3] = {};

static const char response_t_names[] =
  "CONTROLLER_RESPONSE_FATAL_SCRIPT_ERROR"
  "CONTROLLER_RESPONSE_HOST_STATE_CHANGE"
  "CONTROLLER_RESPONSE_UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry response_t_entries[] = {
  { {response_t_names + 0, 38}, 2 },
  { {response_t_names + 38, 37}, 1 },
  { {response_t_names + 75, 31}, 0 },
};

static const int response_t_entries_by_number[] = {
  2, // 0 -> CONTROLLER_RESPONSE_UNSPECIFIED
  1, // 1 -> CONTROLLER_RESPONSE_HOST_STATE_CHANGE
  0, // 2 -> CONTROLLER_RESPONSE_FATAL_SCRIPT_ERROR
};

const std::string& response_t_Name(
    response_t value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          response_t_entries,
          response_t_entries_by_number,
          3, response_t_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      response_t_entries,
      response_t_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     response_t_strings[idx].get();
}
bool response_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, response_t* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      response_t_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<response_t>(int_value);
  }
  return success;
}

// ===================================================================

class request::_Internal {
 public:
};

request::request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servercontroller.request)
}
request::request(const request& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  request* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){from._impl_.args_}
    , decltype(_impl_.request_num_){}
    , decltype(_impl_.request_type_){}
    , decltype(_impl_.request_sub_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.request_num_, &from._impl_.request_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.request_sub_type_) -
    reinterpret_cast<char*>(&_impl_.request_num_)) + sizeof(_impl_.request_sub_type_));
  // @@protoc_insertion_point(copy_constructor:servercontroller.request)
}

inline void request::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.args_){arena}
    , decltype(_impl_.request_num_){0u}
    , decltype(_impl_.request_type_){0}
    , decltype(_impl_.request_sub_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

request::~request() {
  // @@protoc_insertion_point(destructor:servercontroller.request)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.args_.~RepeatedPtrField();
}

void request::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void request::Clear() {
// @@protoc_insertion_point(message_clear_start:servercontroller.request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.args_.Clear();
  ::memset(&_impl_.request_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.request_sub_type_) -
      reinterpret_cast<char*>(&_impl_.request_num_)) + sizeof(_impl_.request_sub_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* request::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 request_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.request_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .servercontroller.request_t request_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_request_type(static_cast<::servercontroller::request_t>(val));
        } else
          goto handle_unusual;
        continue;
      // .servercontroller.sub_request_t request_sub_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_request_sub_type(static_cast<::servercontroller::sub_request_t>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated string args = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_args();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servercontroller.request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 request_num = 1;
  if (this->_internal_request_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_request_num(), target);
  }

  // .servercontroller.request_t request_type = 2;
  if (this->_internal_request_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_request_type(), target);
  }

  // .servercontroller.sub_request_t request_sub_type = 3;
  if (this->_internal_request_sub_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_request_sub_type(), target);
  }

  // repeated string args = 4;
  for (int i = 0, n = this->_internal_args_size(); i < n; i++) {
    const auto& s = this->_internal_args(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servercontroller.request.args");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servercontroller.request)
  return target;
}

size_t request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servercontroller.request)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string args = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.args_.size());
  for (int i = 0, n = _impl_.args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.args_.Get(i));
  }

  // uint32 request_num = 1;
  if (this->_internal_request_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_request_num());
  }

  // .servercontroller.request_t request_type = 2;
  if (this->_internal_request_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_request_type());
  }

  // .servercontroller.sub_request_t request_sub_type = 3;
  if (this->_internal_request_sub_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_request_sub_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void request::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const request*>(
      &from));
}

void request::MergeFrom(const request& from) {
  request* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:servercontroller.request)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.args_.MergeFrom(from._impl_.args_);
  if (from._internal_request_num() != 0) {
    _this->_internal_set_request_num(from._internal_request_num());
  }
  if (from._internal_request_type() != 0) {
    _this->_internal_set_request_type(from._internal_request_type());
  }
  if (from._internal_request_sub_type() != 0) {
    _this->_internal_set_request_sub_type(from._internal_request_sub_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void request::CopyFrom(const request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servercontroller.request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool request::IsInitialized() const {
  return true;
}

void request::InternalSwap(request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.args_.InternalSwap(&other->_impl_.args_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(request, _impl_.request_sub_type_)
      + sizeof(request::_impl_.request_sub_type_)
      - PROTOBUF_FIELD_OFFSET(request, _impl_.request_num_)>(
          reinterpret_cast<char*>(&_impl_.request_num_),
          reinterpret_cast<char*>(&other->_impl_.request_num_));
}

std::string request::GetTypeName() const {
  return "servercontroller.request";
}


// ===================================================================

class response::_Internal {
 public:
};

response::response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servercontroller.response)
}
response::response(const response& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  response* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.is_unsolicited_response_){}
    , decltype(_impl_.response_num_){}
    , decltype(_impl_.response_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&_impl_.is_unsolicited_response_, &from._impl_.is_unsolicited_response_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.response_type_) -
    reinterpret_cast<char*>(&_impl_.is_unsolicited_response_)) + sizeof(_impl_.response_type_));
  // @@protoc_insertion_point(copy_constructor:servercontroller.response)
}

inline void response::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.is_unsolicited_response_){false}
    , decltype(_impl_.response_num_){0u}
    , decltype(_impl_.response_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

response::~response() {
  // @@protoc_insertion_point(destructor:servercontroller.response)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void response::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void response::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void response::Clear() {
// @@protoc_insertion_point(message_clear_start:servercontroller.response)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.is_unsolicited_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.response_type_) -
      reinterpret_cast<char*>(&_impl_.is_unsolicited_response_)) + sizeof(_impl_.response_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* response::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_unsolicited_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_unsolicited_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 response_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.response_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .servercontroller.response_t response_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_response_type(static_cast<::servercontroller::response_t>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* response::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servercontroller.response)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_unsolicited_response = 1;
  if (this->_internal_is_unsolicited_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_unsolicited_response(), target);
  }

  // uint32 response_num = 2;
  if (this->_internal_response_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_response_num(), target);
  }

  // .servercontroller.response_t response_type = 3;
  if (this->_internal_response_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_response_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servercontroller.response)
  return target;
}

size_t response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servercontroller.response)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_unsolicited_response = 1;
  if (this->_internal_is_unsolicited_response() != 0) {
    total_size += 1 + 1;
  }

  // uint32 response_num = 2;
  if (this->_internal_response_num() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_response_num());
  }

  // .servercontroller.response_t response_type = 3;
  if (this->_internal_response_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_response_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void response::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const response*>(
      &from));
}

void response::MergeFrom(const response& from) {
  response* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:servercontroller.response)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_unsolicited_response() != 0) {
    _this->_internal_set_is_unsolicited_response(from._internal_is_unsolicited_response());
  }
  if (from._internal_response_num() != 0) {
    _this->_internal_set_response_num(from._internal_response_num());
  }
  if (from._internal_response_type() != 0) {
    _this->_internal_set_response_type(from._internal_response_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void response::CopyFrom(const response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servercontroller.response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool response::IsInitialized() const {
  return true;
}

void response::InternalSwap(response* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(response, _impl_.response_type_)
      + sizeof(response::_impl_.response_type_)
      - PROTOBUF_FIELD_OFFSET(response, _impl_.is_unsolicited_response_)>(
          reinterpret_cast<char*>(&_impl_.is_unsolicited_response_),
          reinterpret_cast<char*>(&other->_impl_.is_unsolicited_response_));
}

std::string response::GetTypeName() const {
  return "servercontroller.response";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace servercontroller
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::servercontroller::request*
Arena::CreateMaybeMessage< ::servercontroller::request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servercontroller::request >(arena);
}
template<> PROTOBUF_NOINLINE ::servercontroller::response*
Arena::CreateMaybeMessage< ::servercontroller::response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servercontroller::response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <thirdparty/protobuf/port_undef.inc>
