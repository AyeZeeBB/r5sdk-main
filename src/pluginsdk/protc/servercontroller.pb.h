// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servercontroller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_servercontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_servercontroller_2eproto

#include <limits>
#include <string>

#include <thirdparty/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <thirdparty/protobuf/port_undef.inc>
#include <thirdparty/protobuf/io/coded_stream.h>
#include <thirdparty/protobuf/arena.h>
#include <thirdparty/protobuf/arenastring.h>
#include <thirdparty/protobuf/generated_message_util.h>
#include <thirdparty/protobuf/metadata_lite.h>
#include <thirdparty/protobuf/message_lite.h>
#include <thirdparty/protobuf/repeated_field.h>  // IWYU pragma: export
#include <thirdparty/protobuf/extension_set.h>  // IWYU pragma: export
#include <thirdparty/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <thirdparty/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_servercontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_servercontroller_2eproto {
  static const uint32_t offsets[];
};
namespace servercontroller {
class PlayerModerationMessage;
struct PlayerModerationMessageDefaultTypeInternal;
extern PlayerModerationMessageDefaultTypeInternal _PlayerModerationMessage_default_instance_;
class ServerControlMessage;
struct ServerControlMessageDefaultTypeInternal;
extern ServerControlMessageDefaultTypeInternal _ServerControlMessage_default_instance_;
class ServerUpdate;
struct ServerUpdateDefaultTypeInternal;
extern ServerUpdateDefaultTypeInternal _ServerUpdate_default_instance_;
}  // namespace servercontroller
PROTOBUF_NAMESPACE_OPEN
template<> ::servercontroller::PlayerModerationMessage* Arena::CreateMaybeMessage<::servercontroller::PlayerModerationMessage>(Arena*);
template<> ::servercontroller::ServerControlMessage* Arena::CreateMaybeMessage<::servercontroller::ServerControlMessage>(Arena*);
template<> ::servercontroller::ServerUpdate* Arena::CreateMaybeMessage<::servercontroller::ServerUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace servercontroller {

enum ServerUpdate_MESSAGE_TYPE : int {
  ServerUpdate_MESSAGE_TYPE_MESSAGE_UNSPECIFIED = 0,
  ServerUpdate_MESSAGE_TYPE_HOST_STATE_CHANGE = 1,
  ServerUpdate_MESSAGE_TYPE_FATAL_SCRIPT_ERROR = 2,
  ServerUpdate_MESSAGE_TYPE_ServerUpdate_MESSAGE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServerUpdate_MESSAGE_TYPE_ServerUpdate_MESSAGE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServerUpdate_MESSAGE_TYPE_IsValid(int value);
constexpr ServerUpdate_MESSAGE_TYPE ServerUpdate_MESSAGE_TYPE_MESSAGE_TYPE_MIN = ServerUpdate_MESSAGE_TYPE_MESSAGE_UNSPECIFIED;
constexpr ServerUpdate_MESSAGE_TYPE ServerUpdate_MESSAGE_TYPE_MESSAGE_TYPE_MAX = ServerUpdate_MESSAGE_TYPE_FATAL_SCRIPT_ERROR;
constexpr int ServerUpdate_MESSAGE_TYPE_MESSAGE_TYPE_ARRAYSIZE = ServerUpdate_MESSAGE_TYPE_MESSAGE_TYPE_MAX + 1;

const std::string& ServerUpdate_MESSAGE_TYPE_Name(ServerUpdate_MESSAGE_TYPE value);
template<typename T>
inline const std::string& ServerUpdate_MESSAGE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerUpdate_MESSAGE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerUpdate_MESSAGE_TYPE_Name.");
  return ServerUpdate_MESSAGE_TYPE_Name(static_cast<ServerUpdate_MESSAGE_TYPE>(enum_t_value));
}
bool ServerUpdate_MESSAGE_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerUpdate_MESSAGE_TYPE* value);
enum PlayerModerationMessage_ACTION_TYPE : int {
  PlayerModerationMessage_ACTION_TYPE_ACTION_UNSPECIFIED = 0,
  PlayerModerationMessage_ACTION_TYPE_KICK = 1,
  PlayerModerationMessage_ACTION_TYPE_BAN = 2,
  PlayerModerationMessage_ACTION_TYPE_UNBAN = 3,
  PlayerModerationMessage_ACTION_TYPE_PlayerModerationMessage_ACTION_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlayerModerationMessage_ACTION_TYPE_PlayerModerationMessage_ACTION_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PlayerModerationMessage_ACTION_TYPE_IsValid(int value);
constexpr PlayerModerationMessage_ACTION_TYPE PlayerModerationMessage_ACTION_TYPE_ACTION_TYPE_MIN = PlayerModerationMessage_ACTION_TYPE_ACTION_UNSPECIFIED;
constexpr PlayerModerationMessage_ACTION_TYPE PlayerModerationMessage_ACTION_TYPE_ACTION_TYPE_MAX = PlayerModerationMessage_ACTION_TYPE_UNBAN;
constexpr int PlayerModerationMessage_ACTION_TYPE_ACTION_TYPE_ARRAYSIZE = PlayerModerationMessage_ACTION_TYPE_ACTION_TYPE_MAX + 1;

const std::string& PlayerModerationMessage_ACTION_TYPE_Name(PlayerModerationMessage_ACTION_TYPE value);
template<typename T>
inline const std::string& PlayerModerationMessage_ACTION_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerModerationMessage_ACTION_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerModerationMessage_ACTION_TYPE_Name.");
  return PlayerModerationMessage_ACTION_TYPE_Name(static_cast<PlayerModerationMessage_ACTION_TYPE>(enum_t_value));
}
bool PlayerModerationMessage_ACTION_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerModerationMessage_ACTION_TYPE* value);
enum PlayerModerationMessage_IDENTIFIER_TYPE : int {
  PlayerModerationMessage_IDENTIFIER_TYPE_IDENTIFIER_UNSPECIFIED = 0,
  PlayerModerationMessage_IDENTIFIER_TYPE_UID = 1,
  PlayerModerationMessage_IDENTIFIER_TYPE_IP = 2,
  PlayerModerationMessage_IDENTIFIER_TYPE_PlayerModerationMessage_IDENTIFIER_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PlayerModerationMessage_IDENTIFIER_TYPE_PlayerModerationMessage_IDENTIFIER_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PlayerModerationMessage_IDENTIFIER_TYPE_IsValid(int value);
constexpr PlayerModerationMessage_IDENTIFIER_TYPE PlayerModerationMessage_IDENTIFIER_TYPE_IDENTIFIER_TYPE_MIN = PlayerModerationMessage_IDENTIFIER_TYPE_IDENTIFIER_UNSPECIFIED;
constexpr PlayerModerationMessage_IDENTIFIER_TYPE PlayerModerationMessage_IDENTIFIER_TYPE_IDENTIFIER_TYPE_MAX = PlayerModerationMessage_IDENTIFIER_TYPE_IP;
constexpr int PlayerModerationMessage_IDENTIFIER_TYPE_IDENTIFIER_TYPE_ARRAYSIZE = PlayerModerationMessage_IDENTIFIER_TYPE_IDENTIFIER_TYPE_MAX + 1;

const std::string& PlayerModerationMessage_IDENTIFIER_TYPE_Name(PlayerModerationMessage_IDENTIFIER_TYPE value);
template<typename T>
inline const std::string& PlayerModerationMessage_IDENTIFIER_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PlayerModerationMessage_IDENTIFIER_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PlayerModerationMessage_IDENTIFIER_TYPE_Name.");
  return PlayerModerationMessage_IDENTIFIER_TYPE_Name(static_cast<PlayerModerationMessage_IDENTIFIER_TYPE>(enum_t_value));
}
bool PlayerModerationMessage_IDENTIFIER_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PlayerModerationMessage_IDENTIFIER_TYPE* value);
enum ServerControlMessage_MESSAGE_TYPE : int {
  ServerControlMessage_MESSAGE_TYPE_MESSAGE_UNSPECIFIED = 0,
  ServerControlMessage_MESSAGE_TYPE_RELOAD = 1,
  ServerControlMessage_MESSAGE_TYPE_CHANGE_LEVEL = 2,
  ServerControlMessage_MESSAGE_TYPE_KICK = 3,
  ServerControlMessage_MESSAGE_TYPE_BAN = 4,
  ServerControlMessage_MESSAGE_TYPE_ServerControlMessage_MESSAGE_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServerControlMessage_MESSAGE_TYPE_ServerControlMessage_MESSAGE_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServerControlMessage_MESSAGE_TYPE_IsValid(int value);
constexpr ServerControlMessage_MESSAGE_TYPE ServerControlMessage_MESSAGE_TYPE_MESSAGE_TYPE_MIN = ServerControlMessage_MESSAGE_TYPE_MESSAGE_UNSPECIFIED;
constexpr ServerControlMessage_MESSAGE_TYPE ServerControlMessage_MESSAGE_TYPE_MESSAGE_TYPE_MAX = ServerControlMessage_MESSAGE_TYPE_BAN;
constexpr int ServerControlMessage_MESSAGE_TYPE_MESSAGE_TYPE_ARRAYSIZE = ServerControlMessage_MESSAGE_TYPE_MESSAGE_TYPE_MAX + 1;

const std::string& ServerControlMessage_MESSAGE_TYPE_Name(ServerControlMessage_MESSAGE_TYPE value);
template<typename T>
inline const std::string& ServerControlMessage_MESSAGE_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServerControlMessage_MESSAGE_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServerControlMessage_MESSAGE_TYPE_Name.");
  return ServerControlMessage_MESSAGE_TYPE_Name(static_cast<ServerControlMessage_MESSAGE_TYPE>(enum_t_value));
}
bool ServerControlMessage_MESSAGE_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServerControlMessage_MESSAGE_TYPE* value);
// ===================================================================

class ServerUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:servercontroller.ServerUpdate) */ {
 public:
  inline ServerUpdate() : ServerUpdate(nullptr) {}
  ~ServerUpdate() override;
  explicit PROTOBUF_CONSTEXPR ServerUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerUpdate(const ServerUpdate& from);
  ServerUpdate(ServerUpdate&& from) noexcept
    : ServerUpdate() {
    *this = ::std::move(from);
  }

  inline ServerUpdate& operator=(const ServerUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerUpdate& operator=(ServerUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerUpdate* internal_default_instance() {
    return reinterpret_cast<const ServerUpdate*>(
               &_ServerUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerUpdate& a, ServerUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerUpdate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServerUpdate& from);
  void MergeFrom(const ServerUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "servercontroller.ServerUpdate";
  }
  protected:
  explicit ServerUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ServerUpdate_MESSAGE_TYPE MESSAGE_TYPE;
  static constexpr MESSAGE_TYPE MESSAGE_UNSPECIFIED =
    ServerUpdate_MESSAGE_TYPE_MESSAGE_UNSPECIFIED;
  static constexpr MESSAGE_TYPE HOST_STATE_CHANGE =
    ServerUpdate_MESSAGE_TYPE_HOST_STATE_CHANGE;
  static constexpr MESSAGE_TYPE FATAL_SCRIPT_ERROR =
    ServerUpdate_MESSAGE_TYPE_FATAL_SCRIPT_ERROR;
  static inline bool MESSAGE_TYPE_IsValid(int value) {
    return ServerUpdate_MESSAGE_TYPE_IsValid(value);
  }
  static constexpr MESSAGE_TYPE MESSAGE_TYPE_MIN =
    ServerUpdate_MESSAGE_TYPE_MESSAGE_TYPE_MIN;
  static constexpr MESSAGE_TYPE MESSAGE_TYPE_MAX =
    ServerUpdate_MESSAGE_TYPE_MESSAGE_TYPE_MAX;
  static constexpr int MESSAGE_TYPE_ARRAYSIZE =
    ServerUpdate_MESSAGE_TYPE_MESSAGE_TYPE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MESSAGE_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MESSAGE_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MESSAGE_TYPE_Name.");
    return ServerUpdate_MESSAGE_TYPE_Name(enum_t_value);
  }
  static inline bool MESSAGE_TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MESSAGE_TYPE* value) {
    return ServerUpdate_MESSAGE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .servercontroller.ServerUpdate.MESSAGE_TYPE type = 1;
  void clear_type();
  ::servercontroller::ServerUpdate_MESSAGE_TYPE type() const;
  void set_type(::servercontroller::ServerUpdate_MESSAGE_TYPE value);
  private:
  ::servercontroller::ServerUpdate_MESSAGE_TYPE _internal_type() const;
  void _internal_set_type(::servercontroller::ServerUpdate_MESSAGE_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:servercontroller.ServerUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_servercontroller_2eproto;
};
// -------------------------------------------------------------------

class PlayerModerationMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:servercontroller.PlayerModerationMessage) */ {
 public:
  inline PlayerModerationMessage() : PlayerModerationMessage(nullptr) {}
  ~PlayerModerationMessage() override;
  explicit PROTOBUF_CONSTEXPR PlayerModerationMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerModerationMessage(const PlayerModerationMessage& from);
  PlayerModerationMessage(PlayerModerationMessage&& from) noexcept
    : PlayerModerationMessage() {
    *this = ::std::move(from);
  }

  inline PlayerModerationMessage& operator=(const PlayerModerationMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerModerationMessage& operator=(PlayerModerationMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PlayerModerationMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerModerationMessage* internal_default_instance() {
    return reinterpret_cast<const PlayerModerationMessage*>(
               &_PlayerModerationMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerModerationMessage& a, PlayerModerationMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerModerationMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerModerationMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerModerationMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerModerationMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PlayerModerationMessage& from);
  void MergeFrom(const PlayerModerationMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PlayerModerationMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "servercontroller.PlayerModerationMessage";
  }
  protected:
  explicit PlayerModerationMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PlayerModerationMessage_ACTION_TYPE ACTION_TYPE;
  static constexpr ACTION_TYPE ACTION_UNSPECIFIED =
    PlayerModerationMessage_ACTION_TYPE_ACTION_UNSPECIFIED;
  static constexpr ACTION_TYPE KICK =
    PlayerModerationMessage_ACTION_TYPE_KICK;
  static constexpr ACTION_TYPE BAN =
    PlayerModerationMessage_ACTION_TYPE_BAN;
  static constexpr ACTION_TYPE UNBAN =
    PlayerModerationMessage_ACTION_TYPE_UNBAN;
  static inline bool ACTION_TYPE_IsValid(int value) {
    return PlayerModerationMessage_ACTION_TYPE_IsValid(value);
  }
  static constexpr ACTION_TYPE ACTION_TYPE_MIN =
    PlayerModerationMessage_ACTION_TYPE_ACTION_TYPE_MIN;
  static constexpr ACTION_TYPE ACTION_TYPE_MAX =
    PlayerModerationMessage_ACTION_TYPE_ACTION_TYPE_MAX;
  static constexpr int ACTION_TYPE_ARRAYSIZE =
    PlayerModerationMessage_ACTION_TYPE_ACTION_TYPE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ACTION_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ACTION_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ACTION_TYPE_Name.");
    return PlayerModerationMessage_ACTION_TYPE_Name(enum_t_value);
  }
  static inline bool ACTION_TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ACTION_TYPE* value) {
    return PlayerModerationMessage_ACTION_TYPE_Parse(name, value);
  }

  typedef PlayerModerationMessage_IDENTIFIER_TYPE IDENTIFIER_TYPE;
  static constexpr IDENTIFIER_TYPE IDENTIFIER_UNSPECIFIED =
    PlayerModerationMessage_IDENTIFIER_TYPE_IDENTIFIER_UNSPECIFIED;
  static constexpr IDENTIFIER_TYPE UID =
    PlayerModerationMessage_IDENTIFIER_TYPE_UID;
  static constexpr IDENTIFIER_TYPE IP =
    PlayerModerationMessage_IDENTIFIER_TYPE_IP;
  static inline bool IDENTIFIER_TYPE_IsValid(int value) {
    return PlayerModerationMessage_IDENTIFIER_TYPE_IsValid(value);
  }
  static constexpr IDENTIFIER_TYPE IDENTIFIER_TYPE_MIN =
    PlayerModerationMessage_IDENTIFIER_TYPE_IDENTIFIER_TYPE_MIN;
  static constexpr IDENTIFIER_TYPE IDENTIFIER_TYPE_MAX =
    PlayerModerationMessage_IDENTIFIER_TYPE_IDENTIFIER_TYPE_MAX;
  static constexpr int IDENTIFIER_TYPE_ARRAYSIZE =
    PlayerModerationMessage_IDENTIFIER_TYPE_IDENTIFIER_TYPE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& IDENTIFIER_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IDENTIFIER_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IDENTIFIER_TYPE_Name.");
    return PlayerModerationMessage_IDENTIFIER_TYPE_Name(enum_t_value);
  }
  static inline bool IDENTIFIER_TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      IDENTIFIER_TYPE* value) {
    return PlayerModerationMessage_IDENTIFIER_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kIdentifierTypeFieldNumber = 1,
  };
  // string identifier = 2;
  void clear_identifier();
  const std::string& identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_identifier();
  PROTOBUF_NODISCARD std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // .servercontroller.PlayerModerationMessage.IDENTIFIER_TYPE identifier_type = 1;
  void clear_identifier_type();
  ::servercontroller::PlayerModerationMessage_IDENTIFIER_TYPE identifier_type() const;
  void set_identifier_type(::servercontroller::PlayerModerationMessage_IDENTIFIER_TYPE value);
  private:
  ::servercontroller::PlayerModerationMessage_IDENTIFIER_TYPE _internal_identifier_type() const;
  void _internal_set_identifier_type(::servercontroller::PlayerModerationMessage_IDENTIFIER_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:servercontroller.PlayerModerationMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
    int identifier_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_servercontroller_2eproto;
};
// -------------------------------------------------------------------

class ServerControlMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:servercontroller.ServerControlMessage) */ {
 public:
  inline ServerControlMessage() : ServerControlMessage(nullptr) {}
  ~ServerControlMessage() override;
  explicit PROTOBUF_CONSTEXPR ServerControlMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerControlMessage(const ServerControlMessage& from);
  ServerControlMessage(ServerControlMessage&& from) noexcept
    : ServerControlMessage() {
    *this = ::std::move(from);
  }

  inline ServerControlMessage& operator=(const ServerControlMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerControlMessage& operator=(ServerControlMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ServerControlMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerControlMessage* internal_default_instance() {
    return reinterpret_cast<const ServerControlMessage*>(
               &_ServerControlMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerControlMessage& a, ServerControlMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerControlMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerControlMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerControlMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerControlMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ServerControlMessage& from);
  void MergeFrom(const ServerControlMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServerControlMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "servercontroller.ServerControlMessage";
  }
  protected:
  explicit ServerControlMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ServerControlMessage_MESSAGE_TYPE MESSAGE_TYPE;
  static constexpr MESSAGE_TYPE MESSAGE_UNSPECIFIED =
    ServerControlMessage_MESSAGE_TYPE_MESSAGE_UNSPECIFIED;
  static constexpr MESSAGE_TYPE RELOAD =
    ServerControlMessage_MESSAGE_TYPE_RELOAD;
  static constexpr MESSAGE_TYPE CHANGE_LEVEL =
    ServerControlMessage_MESSAGE_TYPE_CHANGE_LEVEL;
  static constexpr MESSAGE_TYPE KICK =
    ServerControlMessage_MESSAGE_TYPE_KICK;
  static constexpr MESSAGE_TYPE BAN =
    ServerControlMessage_MESSAGE_TYPE_BAN;
  static inline bool MESSAGE_TYPE_IsValid(int value) {
    return ServerControlMessage_MESSAGE_TYPE_IsValid(value);
  }
  static constexpr MESSAGE_TYPE MESSAGE_TYPE_MIN =
    ServerControlMessage_MESSAGE_TYPE_MESSAGE_TYPE_MIN;
  static constexpr MESSAGE_TYPE MESSAGE_TYPE_MAX =
    ServerControlMessage_MESSAGE_TYPE_MESSAGE_TYPE_MAX;
  static constexpr int MESSAGE_TYPE_ARRAYSIZE =
    ServerControlMessage_MESSAGE_TYPE_MESSAGE_TYPE_ARRAYSIZE;
  template<typename T>
  static inline const std::string& MESSAGE_TYPE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MESSAGE_TYPE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MESSAGE_TYPE_Name.");
    return ServerControlMessage_MESSAGE_TYPE_Name(enum_t_value);
  }
  static inline bool MESSAGE_TYPE_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      MESSAGE_TYPE* value) {
    return ServerControlMessage_MESSAGE_TYPE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .servercontroller.ServerControlMessage.MESSAGE_TYPE type = 1;
  void clear_type();
  ::servercontroller::ServerControlMessage_MESSAGE_TYPE type() const;
  void set_type(::servercontroller::ServerControlMessage_MESSAGE_TYPE value);
  private:
  ::servercontroller::ServerControlMessage_MESSAGE_TYPE _internal_type() const;
  void _internal_set_type(::servercontroller::ServerControlMessage_MESSAGE_TYPE value);
  public:

  // @@protoc_insertion_point(class_scope:servercontroller.ServerControlMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_servercontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerUpdate

// .servercontroller.ServerUpdate.MESSAGE_TYPE type = 1;
inline void ServerUpdate::clear_type() {
  _impl_.type_ = 0;
}
inline ::servercontroller::ServerUpdate_MESSAGE_TYPE ServerUpdate::_internal_type() const {
  return static_cast< ::servercontroller::ServerUpdate_MESSAGE_TYPE >(_impl_.type_);
}
inline ::servercontroller::ServerUpdate_MESSAGE_TYPE ServerUpdate::type() const {
  // @@protoc_insertion_point(field_get:servercontroller.ServerUpdate.type)
  return _internal_type();
}
inline void ServerUpdate::_internal_set_type(::servercontroller::ServerUpdate_MESSAGE_TYPE value) {
  
  _impl_.type_ = value;
}
inline void ServerUpdate::set_type(::servercontroller::ServerUpdate_MESSAGE_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:servercontroller.ServerUpdate.type)
}

// -------------------------------------------------------------------

// PlayerModerationMessage

// .servercontroller.PlayerModerationMessage.IDENTIFIER_TYPE identifier_type = 1;
inline void PlayerModerationMessage::clear_identifier_type() {
  _impl_.identifier_type_ = 0;
}
inline ::servercontroller::PlayerModerationMessage_IDENTIFIER_TYPE PlayerModerationMessage::_internal_identifier_type() const {
  return static_cast< ::servercontroller::PlayerModerationMessage_IDENTIFIER_TYPE >(_impl_.identifier_type_);
}
inline ::servercontroller::PlayerModerationMessage_IDENTIFIER_TYPE PlayerModerationMessage::identifier_type() const {
  // @@protoc_insertion_point(field_get:servercontroller.PlayerModerationMessage.identifier_type)
  return _internal_identifier_type();
}
inline void PlayerModerationMessage::_internal_set_identifier_type(::servercontroller::PlayerModerationMessage_IDENTIFIER_TYPE value) {
  
  _impl_.identifier_type_ = value;
}
inline void PlayerModerationMessage::set_identifier_type(::servercontroller::PlayerModerationMessage_IDENTIFIER_TYPE value) {
  _internal_set_identifier_type(value);
  // @@protoc_insertion_point(field_set:servercontroller.PlayerModerationMessage.identifier_type)
}

// string identifier = 2;
inline void PlayerModerationMessage::clear_identifier() {
  _impl_.identifier_.ClearToEmpty();
}
inline const std::string& PlayerModerationMessage::identifier() const {
  // @@protoc_insertion_point(field_get:servercontroller.PlayerModerationMessage.identifier)
  return _internal_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerModerationMessage::set_identifier(ArgT0&& arg0, ArgT... args) {
 
 _impl_.identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:servercontroller.PlayerModerationMessage.identifier)
}
inline std::string* PlayerModerationMessage::mutable_identifier() {
  std::string* _s = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:servercontroller.PlayerModerationMessage.identifier)
  return _s;
}
inline const std::string& PlayerModerationMessage::_internal_identifier() const {
  return _impl_.identifier_.Get();
}
inline void PlayerModerationMessage::_internal_set_identifier(const std::string& value) {
  
  _impl_.identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerModerationMessage::_internal_mutable_identifier() {
  
  return _impl_.identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerModerationMessage::release_identifier() {
  // @@protoc_insertion_point(field_release:servercontroller.PlayerModerationMessage.identifier)
  return _impl_.identifier_.Release();
}
inline void PlayerModerationMessage::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  _impl_.identifier_.SetAllocated(identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.identifier_.IsDefault()) {
    _impl_.identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:servercontroller.PlayerModerationMessage.identifier)
}

// -------------------------------------------------------------------

// ServerControlMessage

// .servercontroller.ServerControlMessage.MESSAGE_TYPE type = 1;
inline void ServerControlMessage::clear_type() {
  _impl_.type_ = 0;
}
inline ::servercontroller::ServerControlMessage_MESSAGE_TYPE ServerControlMessage::_internal_type() const {
  return static_cast< ::servercontroller::ServerControlMessage_MESSAGE_TYPE >(_impl_.type_);
}
inline ::servercontroller::ServerControlMessage_MESSAGE_TYPE ServerControlMessage::type() const {
  // @@protoc_insertion_point(field_get:servercontroller.ServerControlMessage.type)
  return _internal_type();
}
inline void ServerControlMessage::_internal_set_type(::servercontroller::ServerControlMessage_MESSAGE_TYPE value) {
  
  _impl_.type_ = value;
}
inline void ServerControlMessage::set_type(::servercontroller::ServerControlMessage_MESSAGE_TYPE value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:servercontroller.ServerControlMessage.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace servercontroller

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::servercontroller::ServerUpdate_MESSAGE_TYPE> : ::std::true_type {};
template <> struct is_proto_enum< ::servercontroller::PlayerModerationMessage_ACTION_TYPE> : ::std::true_type {};
template <> struct is_proto_enum< ::servercontroller::PlayerModerationMessage_IDENTIFIER_TYPE> : ::std::true_type {};
template <> struct is_proto_enum< ::servercontroller::ServerControlMessage_MESSAGE_TYPE> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <thirdparty/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_servercontroller_2eproto
