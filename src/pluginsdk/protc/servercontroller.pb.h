// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: servercontroller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_servercontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_servercontroller_2eproto

#include <limits>
#include <string>

#include <thirdparty/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <thirdparty/protobuf/port_undef.inc>
#include <thirdparty/protobuf/io/coded_stream.h>
#include <thirdparty/protobuf/arena.h>
#include <thirdparty/protobuf/arenastring.h>
#include <thirdparty/protobuf/generated_message_util.h>
#include <thirdparty/protobuf/metadata_lite.h>
#include <thirdparty/protobuf/message_lite.h>
#include <thirdparty/protobuf/repeated_field.h>  // IWYU pragma: export
#include <thirdparty/protobuf/extension_set.h>  // IWYU pragma: export
#include <thirdparty/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <thirdparty/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_servercontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_servercontroller_2eproto {
  static const uint32_t offsets[];
};
namespace servercontroller {
class request;
struct requestDefaultTypeInternal;
extern requestDefaultTypeInternal _request_default_instance_;
class response;
struct responseDefaultTypeInternal;
extern responseDefaultTypeInternal _response_default_instance_;
}  // namespace servercontroller
PROTOBUF_NAMESPACE_OPEN
template<> ::servercontroller::request* Arena::CreateMaybeMessage<::servercontroller::request>(Arena*);
template<> ::servercontroller::response* Arena::CreateMaybeMessage<::servercontroller::response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace servercontroller {

enum request_t : int {
  CONTROLLER_REQUEST_UNSPECIFIED = 0,
  CONTROLLER_REQUEST_GAME_START = 1,
  CONTROLLER_REQUEST_MODERATION = 2,
  CONTROLLER_REQUEST_RELOAD = 3,
  CONTROLLER_REQUSET_CHANGE_LEVEL = 4,
  request_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  request_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool request_t_IsValid(int value);
constexpr request_t request_t_MIN = CONTROLLER_REQUEST_UNSPECIFIED;
constexpr request_t request_t_MAX = CONTROLLER_REQUSET_CHANGE_LEVEL;
constexpr int request_t_ARRAYSIZE = request_t_MAX + 1;

const std::string& request_t_Name(request_t value);
template<typename T>
inline const std::string& request_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, request_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function request_t_Name.");
  return request_t_Name(static_cast<request_t>(enum_t_value));
}
bool request_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, request_t* value);
enum sub_request_t : int {
  CONTROLLER_SUB_REQUEST_UNSPECIFIED = 0,
  CONTROLLER_MODERATION_REQUEST_BAN = 1,
  CONTROLLER_MODERATION_REQUEST_KICK = 2,
  sub_request_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  sub_request_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool sub_request_t_IsValid(int value);
constexpr sub_request_t sub_request_t_MIN = CONTROLLER_SUB_REQUEST_UNSPECIFIED;
constexpr sub_request_t sub_request_t_MAX = CONTROLLER_MODERATION_REQUEST_KICK;
constexpr int sub_request_t_ARRAYSIZE = sub_request_t_MAX + 1;

const std::string& sub_request_t_Name(sub_request_t value);
template<typename T>
inline const std::string& sub_request_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, sub_request_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function sub_request_t_Name.");
  return sub_request_t_Name(static_cast<sub_request_t>(enum_t_value));
}
bool sub_request_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, sub_request_t* value);
enum response_t : int {
  CONTROLLER_RESPONSE_UNSPECIFIED = 0,
  CONTROLLER_RESPONSE_HOST_STATE_CHANGE = 1,
  CONTROLLER_RESPONSE_FATAL_SCRIPT_ERROR = 2,
  response_t_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  response_t_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool response_t_IsValid(int value);
constexpr response_t response_t_MIN = CONTROLLER_RESPONSE_UNSPECIFIED;
constexpr response_t response_t_MAX = CONTROLLER_RESPONSE_FATAL_SCRIPT_ERROR;
constexpr int response_t_ARRAYSIZE = response_t_MAX + 1;

const std::string& response_t_Name(response_t value);
template<typename T>
inline const std::string& response_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, response_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function response_t_Name.");
  return response_t_Name(static_cast<response_t>(enum_t_value));
}
bool response_t_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, response_t* value);
// ===================================================================

class request final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:servercontroller.request) */ {
 public:
  inline request() : request(nullptr) {}
  ~request() override;
  explicit PROTOBUF_CONSTEXPR request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  request(const request& from);
  request(request&& from) noexcept
    : request() {
    *this = ::std::move(from);
  }

  inline request& operator=(const request& from) {
    CopyFrom(from);
    return *this;
  }
  inline request& operator=(request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const request& default_instance() {
    return *internal_default_instance();
  }
  static inline const request* internal_default_instance() {
    return reinterpret_cast<const request*>(
               &_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(request& a, request& b) {
    a.Swap(&b);
  }
  inline void Swap(request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<request>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const request& from);
  void MergeFrom(const request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "servercontroller.request";
  }
  protected:
  explicit request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 4,
    kRequestNumFieldNumber = 1,
    kRequestTypeFieldNumber = 2,
    kRequestSubTypeFieldNumber = 3,
  };
  // repeated string args = 4;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // uint32 request_num = 1;
  void clear_request_num();
  uint32_t request_num() const;
  void set_request_num(uint32_t value);
  private:
  uint32_t _internal_request_num() const;
  void _internal_set_request_num(uint32_t value);
  public:

  // .servercontroller.request_t request_type = 2;
  void clear_request_type();
  ::servercontroller::request_t request_type() const;
  void set_request_type(::servercontroller::request_t value);
  private:
  ::servercontroller::request_t _internal_request_type() const;
  void _internal_set_request_type(::servercontroller::request_t value);
  public:

  // .servercontroller.sub_request_t request_sub_type = 3;
  void clear_request_sub_type();
  ::servercontroller::sub_request_t request_sub_type() const;
  void set_request_sub_type(::servercontroller::sub_request_t value);
  private:
  ::servercontroller::sub_request_t _internal_request_sub_type() const;
  void _internal_set_request_sub_type(::servercontroller::sub_request_t value);
  public:

  // @@protoc_insertion_point(class_scope:servercontroller.request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
    uint32_t request_num_;
    int request_type_;
    int request_sub_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_servercontroller_2eproto;
};
// -------------------------------------------------------------------

class response final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:servercontroller.response) */ {
 public:
  inline response() : response(nullptr) {}
  ~response() override;
  explicit PROTOBUF_CONSTEXPR response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  response(const response& from);
  response(response&& from) noexcept
    : response() {
    *this = ::std::move(from);
  }

  inline response& operator=(const response& from) {
    CopyFrom(from);
    return *this;
  }
  inline response& operator=(response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const response& default_instance() {
    return *internal_default_instance();
  }
  static inline const response* internal_default_instance() {
    return reinterpret_cast<const response*>(
               &_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(response& a, response& b) {
    a.Swap(&b);
  }
  inline void Swap(response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<response>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const response& from);
  void MergeFrom(const response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "servercontroller.response";
  }
  protected:
  explicit response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsUnsolicitedResponseFieldNumber = 1,
    kResponseNumFieldNumber = 2,
    kResponseTypeFieldNumber = 3,
  };
  // bool is_unsolicited_response = 1;
  void clear_is_unsolicited_response();
  bool is_unsolicited_response() const;
  void set_is_unsolicited_response(bool value);
  private:
  bool _internal_is_unsolicited_response() const;
  void _internal_set_is_unsolicited_response(bool value);
  public:

  // uint32 response_num = 2;
  void clear_response_num();
  uint32_t response_num() const;
  void set_response_num(uint32_t value);
  private:
  uint32_t _internal_response_num() const;
  void _internal_set_response_num(uint32_t value);
  public:

  // .servercontroller.response_t response_type = 3;
  void clear_response_type();
  ::servercontroller::response_t response_type() const;
  void set_response_type(::servercontroller::response_t value);
  private:
  ::servercontroller::response_t _internal_response_type() const;
  void _internal_set_response_type(::servercontroller::response_t value);
  public:

  // @@protoc_insertion_point(class_scope:servercontroller.response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool is_unsolicited_response_;
    uint32_t response_num_;
    int response_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_servercontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// request

// uint32 request_num = 1;
inline void request::clear_request_num() {
  _impl_.request_num_ = 0u;
}
inline uint32_t request::_internal_request_num() const {
  return _impl_.request_num_;
}
inline uint32_t request::request_num() const {
  // @@protoc_insertion_point(field_get:servercontroller.request.request_num)
  return _internal_request_num();
}
inline void request::_internal_set_request_num(uint32_t value) {
  
  _impl_.request_num_ = value;
}
inline void request::set_request_num(uint32_t value) {
  _internal_set_request_num(value);
  // @@protoc_insertion_point(field_set:servercontroller.request.request_num)
}

// .servercontroller.request_t request_type = 2;
inline void request::clear_request_type() {
  _impl_.request_type_ = 0;
}
inline ::servercontroller::request_t request::_internal_request_type() const {
  return static_cast< ::servercontroller::request_t >(_impl_.request_type_);
}
inline ::servercontroller::request_t request::request_type() const {
  // @@protoc_insertion_point(field_get:servercontroller.request.request_type)
  return _internal_request_type();
}
inline void request::_internal_set_request_type(::servercontroller::request_t value) {
  
  _impl_.request_type_ = value;
}
inline void request::set_request_type(::servercontroller::request_t value) {
  _internal_set_request_type(value);
  // @@protoc_insertion_point(field_set:servercontroller.request.request_type)
}

// .servercontroller.sub_request_t request_sub_type = 3;
inline void request::clear_request_sub_type() {
  _impl_.request_sub_type_ = 0;
}
inline ::servercontroller::sub_request_t request::_internal_request_sub_type() const {
  return static_cast< ::servercontroller::sub_request_t >(_impl_.request_sub_type_);
}
inline ::servercontroller::sub_request_t request::request_sub_type() const {
  // @@protoc_insertion_point(field_get:servercontroller.request.request_sub_type)
  return _internal_request_sub_type();
}
inline void request::_internal_set_request_sub_type(::servercontroller::sub_request_t value) {
  
  _impl_.request_sub_type_ = value;
}
inline void request::set_request_sub_type(::servercontroller::sub_request_t value) {
  _internal_set_request_sub_type(value);
  // @@protoc_insertion_point(field_set:servercontroller.request.request_sub_type)
}

// repeated string args = 4;
inline int request::_internal_args_size() const {
  return _impl_.args_.size();
}
inline int request::args_size() const {
  return _internal_args_size();
}
inline void request::clear_args() {
  _impl_.args_.Clear();
}
inline std::string* request::add_args() {
  std::string* _s = _internal_add_args();
  // @@protoc_insertion_point(field_add_mutable:servercontroller.request.args)
  return _s;
}
inline const std::string& request::_internal_args(int index) const {
  return _impl_.args_.Get(index);
}
inline const std::string& request::args(int index) const {
  // @@protoc_insertion_point(field_get:servercontroller.request.args)
  return _internal_args(index);
}
inline std::string* request::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:servercontroller.request.args)
  return _impl_.args_.Mutable(index);
}
inline void request::set_args(int index, const std::string& value) {
  _impl_.args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:servercontroller.request.args)
}
inline void request::set_args(int index, std::string&& value) {
  _impl_.args_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:servercontroller.request.args)
}
inline void request::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:servercontroller.request.args)
}
inline void request::set_args(int index, const char* value, size_t size) {
  _impl_.args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:servercontroller.request.args)
}
inline std::string* request::_internal_add_args() {
  return _impl_.args_.Add();
}
inline void request::add_args(const std::string& value) {
  _impl_.args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:servercontroller.request.args)
}
inline void request::add_args(std::string&& value) {
  _impl_.args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:servercontroller.request.args)
}
inline void request::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:servercontroller.request.args)
}
inline void request::add_args(const char* value, size_t size) {
  _impl_.args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:servercontroller.request.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
request::args() const {
  // @@protoc_insertion_point(field_list:servercontroller.request.args)
  return _impl_.args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
request::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:servercontroller.request.args)
  return &_impl_.args_;
}

// -------------------------------------------------------------------

// response

// bool is_unsolicited_response = 1;
inline void response::clear_is_unsolicited_response() {
  _impl_.is_unsolicited_response_ = false;
}
inline bool response::_internal_is_unsolicited_response() const {
  return _impl_.is_unsolicited_response_;
}
inline bool response::is_unsolicited_response() const {
  // @@protoc_insertion_point(field_get:servercontroller.response.is_unsolicited_response)
  return _internal_is_unsolicited_response();
}
inline void response::_internal_set_is_unsolicited_response(bool value) {
  
  _impl_.is_unsolicited_response_ = value;
}
inline void response::set_is_unsolicited_response(bool value) {
  _internal_set_is_unsolicited_response(value);
  // @@protoc_insertion_point(field_set:servercontroller.response.is_unsolicited_response)
}

// uint32 response_num = 2;
inline void response::clear_response_num() {
  _impl_.response_num_ = 0u;
}
inline uint32_t response::_internal_response_num() const {
  return _impl_.response_num_;
}
inline uint32_t response::response_num() const {
  // @@protoc_insertion_point(field_get:servercontroller.response.response_num)
  return _internal_response_num();
}
inline void response::_internal_set_response_num(uint32_t value) {
  
  _impl_.response_num_ = value;
}
inline void response::set_response_num(uint32_t value) {
  _internal_set_response_num(value);
  // @@protoc_insertion_point(field_set:servercontroller.response.response_num)
}

// .servercontroller.response_t response_type = 3;
inline void response::clear_response_type() {
  _impl_.response_type_ = 0;
}
inline ::servercontroller::response_t response::_internal_response_type() const {
  return static_cast< ::servercontroller::response_t >(_impl_.response_type_);
}
inline ::servercontroller::response_t response::response_type() const {
  // @@protoc_insertion_point(field_get:servercontroller.response.response_type)
  return _internal_response_type();
}
inline void response::_internal_set_response_type(::servercontroller::response_t value) {
  
  _impl_.response_type_ = value;
}
inline void response::set_response_type(::servercontroller::response_t value) {
  _internal_set_response_type(value);
  // @@protoc_insertion_point(field_set:servercontroller.response.response_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace servercontroller

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::servercontroller::request_t> : ::std::true_type {};
template <> struct is_proto_enum< ::servercontroller::sub_request_t> : ::std::true_type {};
template <> struct is_proto_enum< ::servercontroller::response_t> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <thirdparty/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_servercontroller_2eproto
